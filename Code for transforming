# Import necessary libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import GradientBoostingRegressor, RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt
import seaborn as sns

# Load dataset
data = pd.read_csv('house_prices.csv')  # replace with your actual CSV file

# Basic data cleaning
data.dropna(axis=0, subset=['SalePrice'], inplace=True)
data.fillna(data.mean(numeric_only=True), inplace=True)

# Feature selection and engineering
X = data.select_dtypes(include=[np.number]).drop(['Id', 'SalePrice'], axis=1)
y = data['SalePrice']

# Train/test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Feature scaling
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = s

# Define regression models
mode
    'GradientBoosting': GradientBoostingRegressor(n_estimators=300, learning_rate=0.05, max_de random_state=42),
    'RandomForest': RandomForestRegressor(n_estimators=200, max_depth=10, random_state=
# Train and evaluate models
for name, model in models.items():
    model.fit(X_train_scaled, y_
    predictions = model.predict(X_test_scaled)
    rmse = np.sqrt(mean_squarer(y_test, predictions))
    r2 = r2_s
    print(f"{name} - RMSE {r2:.2f}")

# Visual the be models['GradientBoosting']
predictions = best_model.pre
plt.figure(figsize=(8, 6))
sns.scatterplot(x=y_te
plt.xlabel("Actual Sal
plt
